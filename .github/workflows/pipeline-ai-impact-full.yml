name: AI Impact Full Pipeline

on:
  workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  generate_tests:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        shell: powershell
        run: |
          $authUrl = "http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token"
          $headers = @{ "Content-Type" = "application/x-www-form-urlencoded" }
          $body = @{
              client_id  = "ai-impact-client"
              username   = "administrator"
              password   = "Gft@2025"
              scope      = "openid"
              grant_type = "password"
          }

          $response = Invoke-RestMethod -Uri $authUrl -Method Post -Headers $headers -Body $body
          $ACCESS_TOKEN = $response.access_token

          if (-not $ACCESS_TOKEN -or $ACCESS_TOKEN -eq "null") {
              Write-Host "Failed to obtain access token"
              Write-Host ($response | ConvertTo-Json -Depth 10)
              exit 1
          }

          "access_token=$ACCESS_TOKEN" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Checkout the branch
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: Create Classes List
        id: changes
        run: |
          java_files=$(find "src/main/java/com/scalesec/vulnado" -type f -name "*.java")
          JAVA_FILES=()

          while IFS= read -r FILE; do
            echo "Processing file: $FILE"
            JAVA_FILES+=("$FILE")
          done <<< "$java_files"

          echo "JAVA_FILES=${JAVA_FILES[@]}"
          {
            echo "java_files<<EOF"
            printf "%s\n" "${JAVA_FILES[@]}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Prepare and Send to API (TestCreator)
        id: send_api
        run: |
          FILES_ARRAY=()
          while IFS= read -r FILE; do
            CLASS_NAME=$(basename "$FILE" .java)
            TEST_FILE="src/test/java/com/scalesec/vulnado/${CLASS_NAME}Tests.java"
            FILES_ARRAY+=(--form "files=@${FILE}")
            if [ -f "$TEST_FILE" ]; then
              FILES_ARRAY+=(--form "ExistingTests=@${TEST_FILE}")
            fi
          done <<< "${{ env.java_files }}"

          RESPONSE=$(curl --location 'http://api.gftaiimpact.local/ai/test' \
            --header "Authorization: Bearer ${{ env.access_token }}" \
            --form "RunName=GenerateTests" \
            "${FILES_ARRAY[@]}" \
            --form "jobName=DemoTestCreator" \
            --form "SearchPattern=*.java" \
            --form "TargetExtension=java" \
            --form "PromptId=TestCreator__CreateUnitTests_V1" \
            --form "SourceCodeLanguage=Java" \
            --form "TestType=Unit" \
            --form "TestingFrameworks=MSTEST,MOQ" \
            --form "Llm=${{ vars.LLM }}" \
            --form "AdditionalInstructions=Generate only the source code, without any extra information")

          echo "API Response: $RESPONSE"
          JOB_ID=$(echo $RESPONSE | jq -r '.jobId')
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: Monitor Job Status
        id: monitor_status
        run: |
          JOB_ID=${{ env.job_id }}
          STATUS="Pending"
          while [[ "$STATUS" != "Completed" ]]; do
            RESPONSE=$(curl --location "http://api.gftaiimpact.local/ai/jobs/$JOB_ID/status" \
              --header "Authorization: Bearer ${{ env.access_token }}")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            sleep 10
          done
          echo "Final status: $STATUS"

      - name: Save Generated Tests
        run: |
          OUTPUT_URIS="${{ env.output_uris }}"
          while IFS= read -r uri; do
            FILE_URL="http://api.gftaiimpact.local${uri}" 
            FILE_CONTENT=$(curl --location "$FILE_URL" --header "Authorization: Bearer ${{ env.access_token }}")
            CLASS_NAME=$(basename "$uri" .java)
            TEST_FILE="src/test/java/com/scalesec/vulnado/${CLASS_NAME}Tests.java"

            mkdir -p "$(dirname "$TEST_FILE")"
            echo "$FILE_CONTENT" > "$TEST_FILE"
          done <<< "$OUTPUT_URIS"

      - name: Commit and Push Generated Files
        run: |
          git config --global user.name 'gft-ai-impact[bot]'
          git config --global user.email 'ai-impact[bot]@gft.com'
          git add .
          git commit -m "Add generated Documentations and Unit Tests"
          git push --set-upstream origin ${{ github.event.pull_request.head.ref }}

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "AI Impact documentation and Unit Tests"
          title: "Documentation and Unit Tests created by AI Impact"
          body: "Pull request created by AI Impact CodeDocumenter and CodeTester."
          branch: "tester-by-ai"
          delete-branch: true
          add-paths: |
              ./**/*.java
              ./**/*.md
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: "auto-generated, tests"
          draft: false
